{"pageProps":{"data":{"kind":"blogger#post","id":"6466348211579113359","blog":{"id":"1878161774557981040"},"published":"2020-09-19T22:38:00-07:00","updated":"2021-02-07T00:18:00-08:00","url":"http://disa-ada.blogspot.com/2020/09/otentikasi-user-dengan-jwt-dalam.html","selfLink":"https://www.googleapis.com/blogger/v3/blogs/1878161774557981040/posts/6466348211579113359","title":"Otentikasi User Dengan JWT Dalam ExpressJS","content":"<p>&nbsp;Otentikasi dilakukan untuk pengecekan agar tidak sembarang orang yang bisa mengakses fitur/<i>request</i>, melainkan hanya untuk orang-orang yg sudah terdaftar/login saja. Kalau dulu dalam pengecekan ini saya mengetahuinya dengan menggunakan <i>session</i>, dengan alur ketika user login, data login disimpan di <i>session store</i>, lalu ketika user hendak mengakses suatu fitur/meminta <i>request</i>, server akan mengecek apakah datanya ada di dalam <i>session store</i> atau tidak. Kalau tidak, <i>request</i>-nya akan ditolak sehingga mengharusnya dia login kembali.</p><p>Nah, JWT (JSON Web Token) juga mirip-mirip alur logikanya, hanya data yang digunakan untuk pengecekannya tidak menggunakan <i>session</i>,<i> </i>melainkan dengan token. Kalau digambarkan alurnya seperti ini:</p><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-yDJ4LBtk0v8/X2a3-ttkRDI/AAAAAAAABfU/gnaZiCpFgOw4-8J1OpCaHJXn5OVA9X4IQCLcBGAsYHQ/s435/Screenshot%2Bfrom%2B2020-09-20%2B08-59-42.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"398\" data-original-width=\"435\" height=\"366\" src=\"https://1.bp.blogspot.com/-yDJ4LBtk0v8/X2a3-ttkRDI/AAAAAAAABfU/gnaZiCpFgOw4-8J1OpCaHJXn5OVA9X4IQCLcBGAsYHQ/w400-h366/Screenshot%2Bfrom%2B2020-09-20%2B08-59-42.png\" width=\"400\" /></a></div><p>Disini saya menggunakan <a href=\"https://www.postman.com/\">Postman</a> sebagai simulasi <i>client</i> agar saya bisa fokus ke bagian pemrograman servernya (step nomor 2, 3, 6, dan 7). Lalu diasumsikan sudah terkoneksi dengan <i>database </i>dan sudah ada beberapa data user (password dienkripsi dengan menggunakan <a href=\"https://www.npmjs.com/package/bcrypt\">bcrypt</a>). Saya menggunakan ExpressJS, berikut tahapannya:</p><p>1. Membuat <i>callback </i>login/ signup, tidak lupa install package <a href=\"https://www.npmjs.com/package/jsonwebtoken\">jsonwebtoken</a><br /><script src=\"https://gist.github.com/disaada/d42aeda7e4c52b8bb1d1e7b9997a7833.js\"></script></p><p>2. Membuat <i>function </i>untuk otentikasi JWT</p><p>ketika <i>client </i>meminta <i>request, client </i>harus menyertakan tokennya untuk dicek, nanti token akan di kirim dalam bentuk objek :</p><p><i>authorization : Bearer {token yang berisi sekumpulan kode-kode}</i></p><p>kita hanya memerlukan tokennya saja, <i>bearer </i>tidak dibawa. Maka kodenya akan seperti ini :&nbsp;</p><p><script src=\"https://gist.github.com/disaada/e881e369729160f04632662a6cbc9fe3.js\"></script></p><p>&nbsp;lalu <i>function </i>otentikasi JWT (kalau saya namanya <i><span class=\"pl-en\">authenticateJWT</span></i>)<i> </i>bisa kita panggil di<i> </i>semua <i>callback</i> sebagai <i>middleware</i> yang tugasnya seperti satpam yang akan selalu minta <i>ID Card</i> kita (token) setiap kita mau memasuki ruangan-ruangan khusus yang hanya bisa dimasuki orang-orang tertentu</p><p><script src=\"https://gist.github.com/disaada/ad6382ce42b114f96304e9ba26354204.js\"></script></p><p>kita coba simulasi menggunakan Postman, pastikan server sudah aktif. Simulasi diawali ketika user login :</p><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-6uYkiWklrnQ/X2bphLgXA-I/AAAAAAAABgM/0PTK3-118bsVcNmgEE_-dMD9lK1NmsdWACLcBGAsYHQ/s1034/Screenshot%2Bfrom%2B2020-09-20%2B08-34-43.jpg\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"675\" data-original-width=\"1034\" height=\"418\" src=\"https://1.bp.blogspot.com/-6uYkiWklrnQ/X2bphLgXA-I/AAAAAAAABgM/0PTK3-118bsVcNmgEE_-dMD9lK1NmsdWACLcBGAsYHQ/w640-h418/Screenshot%2Bfrom%2B2020-09-20%2B08-34-43.jpg\" width=\"640\" /></a></div><p>lalu ketika user berhasil login, kemudian user ceritanya ingin mengakses menu Profile untuk melihat Profile pribadinya. Sebelum masuk ke modul Profile, server akan melakukan pengecekan terlebih dahulu. Karena ini simulasi, jadi token harus kita masukkan manual </p><p></p><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-1IBeaZ8c01g/X2bp_vrS_MI/AAAAAAAABgU/6lCmaPd2VEQo0LUIH0Mxhu7FmWoIuM6IgCLcBGAsYHQ/s1043/Screenshot%2Bfrom%2B2020-09-20%2B08-35-28.jpg\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"690\" data-original-width=\"1043\" height=\"424\" src=\"https://1.bp.blogspot.com/-1IBeaZ8c01g/X2bp_vrS_MI/AAAAAAAABgU/6lCmaPd2VEQo0LUIH0Mxhu7FmWoIuM6IgCLcBGAsYHQ/w640-h424/Screenshot%2Bfrom%2B2020-09-20%2B08-35-28.jpg\" width=\"640\" /></a></div><br />&nbsp;<p></p><p>Demikian simulasi otentikasi dengan menggunakan JWT dalam ExpressJS. Semoga bermanfaat, apakah ada yang tidak dipahami? Jika ada, silahkan layangkan di kolom komentar ^^</p>","author":{"id":"02079035408372565918","displayName":"Disa Ada","url":"https://www.blogger.com/profile/02079035408372565918","image":{"url":"//www.blogger.com/img/blogger_logo_round_35.png"}},"replies":{"totalItems":"0","selfLink":"https://www.googleapis.com/blogger/v3/blogs/1878161774557981040/posts/6466348211579113359/comments"},"labels":["Web Developing"],"etag":"\"dGltZXN0YW1wOiAxNjEyNjg1ODgwMTgxCm9mZnNldDogLTI4ODAwMDAwCg\""}},"__N_SSG":true}